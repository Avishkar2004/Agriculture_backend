CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,            -- Unique identifier for each user
    username VARCHAR(50) NOT NULL,               -- User's username
    email VARCHAR(100) UNIQUE NOT NULL,          -- User's email (unique)
    password VARCHAR(255) NOT NULL,              -- User's hashed password
    avatar VARCHAR(255) DEFAULT NULL,            -- URL of the user's profile picture
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for when the user was created
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Timestamp for last update
);

ALTER TABLE users 
ADD COLUMN github_id VARCHAR(255) DEFAULT NULL,
ADD COLUMN google_id VARCHAR(255) DEFAULT NULL;
ALTER TABLE users ADD COLUMN role ENUM('user', 'admin') DEFAULT 'user';
UPDATE users SET role = 'admin' WHERE email = 'kakdevicky476@gmail.com';





CREATE TABLE insecticide (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image LONGBLOB,
    price_small DECIMAL(10, 2),
    salePrice DECIMAL(10, 2),
    review_50 INT,
    review_100 INT,
    save_50 DECIMAL(10, 2),
    save_100 DECIMAL(10, 2),
    stockStatus ENUM('In Stock', 'Out of Stock'),
    small_50 VARCHAR(50),
    big_100 VARCHAR(50)
    brands VARCHAR(255)
);

CREATE TABLE fungicides (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image LONGBLOB,
    price_small DECIMAL(10, 2),
    salePrice DECIMAL(10, 2),
    review_50 INT,
    review_100 INT,
    save_50 DECIMAL(10, 2),
    save_100 DECIMAL(10, 2),
    stockStatus ENUM('In Stock', 'Out of Stock'),
    small_50 VARCHAR(50),
    big_100 VARCHAR(50)
    brands VARCHAR(255)
);

CREATE TABLE micro_nutrients (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image LONGBLOB,
    price_small DECIMAL(10, 2),
    salePrice DECIMAL(10, 2),
    review_50 INT,
    review_100 INT,
    save_50 DECIMAL(10, 2),
    save_100 DECIMAL(10, 2),
    stockStatus ENUM('In Stock', 'Out of Stock'),
    small_50 VARCHAR(50),
    big_100 VARCHAR(50)
    brands VARCHAR(255)
);

CREATE TABLE organicproduct (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image LONGBLOB,
    price_small DECIMAL(10, 2),
    salePrice DECIMAL(10, 2),
    review_50 INT,
    review_100 INT,
    save_50 DECIMAL(10, 2),
    save_100 DECIMAL(10, 2),
    stockStatus ENUM('In Stock', 'Out of Stock'),
    small_50 VARCHAR(50),
    big_100 VARCHAR(50)
    brands VARCHAR(255)
);


CREATE TABLE plantgrowthregulator (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    image LONGBLOB,
    price_small DECIMAL(10, 2),
    salePrice DECIMAL(10, 2),
    review_50 INT,
    review_100 INT,
    save_50 DECIMAL(10, 2),
    save_100 DECIMAL(10, 2),
    stockStatus ENUM('In Stock', 'Out of Stock'),
    small_50 VARCHAR(50),
    big_100 VARCHAR(50)
    brands VARCHAR(255)
);



For Orders

CREATE TABLE orders (
    id INT AUTO_INCREMENT PRIMARY KEY,                  -- Unique identifier for the order
    user_id INT NOT NULL,                               -- Foreign key for the user placing the order
    product_id INT NOT NULL,                            -- Foreign key for the ordered product
    product_name VARCHAR(255) NOT NULL,                -- Name of the product
    customer_name VARCHAR(255) NOT NULL,               -- Customer's full name
    quantity INT NOT NULL,                              -- Quantity of the product ordered
    email VARCHAR(100) NOT NULL,                        -- Customer's email
    phone_number VARCHAR(15) NOT NULL,                 -- Customer's phone number
    address TEXT NOT NULL,                              -- Customer's address
    city VARCHAR(50) NOT NULL,                          -- City
    state VARCHAR(50) NOT NULL,                         -- State
    zip_code VARCHAR(10) NOT NULL,                      -- Zip code
    country VARCHAR(50) NOT NULL,                       -- Country
    payment_method ENUM('creditCard', 'upi', 'netBanking', 'paypal') NOT NULL, -- Payment method
    credit_card VARCHAR(20),                            -- Credit card details (nullable)
    upi_id VARCHAR(100),                                -- UPI ID (nullable)
    bank_name VARCHAR(255),                             -- Bank name (nullable)
    order_status ENUM('pending', 'completed', 'canceled') DEFAULT 'pending', -- Status of the order
    price DECIMAL(10, 2) NOT NULL,                      -- Total price of the order
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Timestamp for when the order was created
    FOREIGN KEY (user_id) REFERENCES users(id)          -- Foreign key constraint for user_id
);

ALTER TABLE orders MODIFY order_status ENUM('Pending', 'Shipped', 'Delivered', 'Cancelled');



CREATE TABLE delivery_addresses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,  -- Assuming you have a 'users' table to link to the user
    name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    alternate_phone_number VARCHAR(15),
    pincode VARCHAR(6) NOT NULL,
    locality VARCHAR(255) NOT NULL,
    street_address VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL,
    landmark VARCHAR(255),
    address_type ENUM('Home', 'Work') NOT NULL DEFAULT 'Home',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)  -- Assuming there is a users table
);



CREATE TABLE ratings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    user_id INT NOT NULL,
    username VARCHAR(100) NOT NULL,
    rating TINYINT NOT NULL CHECK (rating BETWEEN 1 AND 5), -- Ratings between 1 and 5
    comment TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

ALTER TABLE reviews ADD UNIQUE KEY `unique_review` (product_id, user_id);



